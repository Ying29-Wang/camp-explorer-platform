#!/usr/bin/env node
// Load environment variables first
const path = require('path');

// Try to load .env file but don't fail if it doesn't exist (for production environments)
try {
  require('dotenv').config({ path: path.join(__dirname, '..', '.env') });
} catch (error) {
  console.log('No .env file found, using environment variables');
}

// Debug log to help troubleshoot
console.log('Environment check in bin/www - PORT:', process.env.PORT);
console.log('Environment check in bin/www - NODE_ENV:', process.env.NODE_ENV);
console.log('Environment check in bin/www - MONGODB_URI exists:', !!process.env.MONGODB_URI);

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

// Updated port to avoid conflicts with system processes
let currentPort = normalizePort(process.env.PORT || '5001');
app.set('port', currentPort);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

function startServer(port) {
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}

startServer(currentPort);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof currentPort === 'string'
    ? 'Pipe ' + currentPort
    : 'Port ' + currentPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      // Try a different port
      currentPort = currentPort + 1;
      console.log(`Port ${currentPort - 1} is in use, trying port ${currentPort} instead`);
      app.set('port', currentPort);
      server.close();
      server = http.createServer(app);
      startServer(currentPort);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Server is listening on ' + bind);
  debug('Listening on ' + bind);
}
