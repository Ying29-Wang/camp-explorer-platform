# Camp Explorer Platform

A comprehensive full-stack web application for discovering, managing, and reviewing camping locations. Built with React, Node.js, Express, and MongoDB.

## ðŸš€ Features

### Core Functionality
- âœ… Browse and search camping locations
- âœ… View detailed camp information
- âœ… User authentication and authorization
- âœ… Review and rating system
- âœ… Interactive map integration
- âœ… Responsive design for all devices

### API Operations
- **Camps Management**
  - âœ… Create new camp listings
  - âœ… Read camp details and listings
  - âœ… Update camp information
  - âœ… Delete camp listings

- **User Management**
  - âœ… User registration
  - âœ… User profiles
  - âœ… User role management
  - âœ… Admin controls

- **Review System**
  - âœ… Post reviews
  - âœ… Read reviews
  - âœ… Update reviews
  - âœ… Delete reviews

### Authentication & Security
- âœ… Secure user registration
- âœ… JWT-based authentication
- âœ… Role-based access control
- âœ… Protected routes
- âœ… Session management

### External Integrations
- âœ… Google Maps API integration
- âœ… Geocoding service for address conversion
- âœ… Real-time location services

### Pages & UI Components
- âœ… Homepage with featured camps
- âœ… Search results with filters
- âœ… Detailed camp view
- âœ… User profile management
- âœ… Login/Register forms
- âœ… Camp management dashboard
- âœ… Admin control panel

### Data Handling
- âœ… Form validation
- âœ… Error handling
- âœ… Loading states
- âœ… Data persistence
- âœ… Input sanitization

## Tech Stack

### Frontend
- React.js
- Vite
- React Router
- Tailwind CSS
- Axios
- React Icons
- Google Maps API

### Backend
- Node.js
- Express.js
- MongoDB
- Mongoose
- JWT Authentication
- Geocoding API

## Prerequisites

- Node.js (v14 or higher)
- MongoDB
- npm or yarn
- Google Maps API key
- Geocoding API key

## Installation

1. Clone the repository:
```bash
git clone [your-repository-url]
cd camp-explorer-platform
```

2. Install dependencies:
```bash
npm run install-all
```

3. Set up environment variables:
   - Create a `.env` file in the server directory with:
     ```
     PORT=5000
     MONGO_URI=your_mongodb_connection_string
     JWT_SECRET=your_jwt_secret
     GOOGLE_MAPS_API_KEY=your_google_maps_api_key
     GEOCODING_API_KEY=your_geocoding_api_key
     ```
   - Create a `.env` file in the client directory with:
     ```
     VITE_API_URL=http://localhost:5000
     VITE_APP_NAME=Camp Explorer
     VITE_GOOGLE_MAPS_API_KEY=your_google_maps_api_key
     ```

## Running the Application

1. Start both frontend and backend servers:
```bash
npm start
```

Or run them separately:

2. Start the backend server:
```bash
npm run server
```

3. Start the frontend development server:
```bash
npm run client
```

The application will be available at:
- Frontend: http://localhost:5173
- Backend API: http://localhost:5000

## Project Structure

```
camp-explorer-platform/
â”œâ”€â”€ client/                 # Frontend React application
â”‚   â”œâ”€â”€ src/
â”‚   â”‚   â”œâ”€â”€ components/     # React components
â”‚   â”‚   â”œâ”€â”€ pages/         # Page components
â”‚   â”‚   â”œâ”€â”€ context/       # React context
â”‚   â”‚   â”œâ”€â”€ services/      # API services
â”‚   â”‚   â””â”€â”€ App.jsx        # Main application component
â”‚   â””â”€â”€ vite.config.js     # Vite configuration
â”œâ”€â”€ server/                 # Backend Node.js application
â”‚   â”œâ”€â”€ models/            # MongoDB models
â”‚   â”œâ”€â”€ routes/            # API routes
â”‚   â”œâ”€â”€ controllers/       # Route controllers
â”‚   â”œâ”€â”€ middleware/        # Custom middleware
â”‚   â””â”€â”€ app.js             # Express application
â””â”€â”€ package.json           # Root package.json
```

## API Endpoints

### Camps
- `GET /api/camps` - Get all camps
- `GET /api/camps/:id` - Get camp by ID
- `POST /api/camps` - Create new camp
- `PUT /api/camps/:id` - Update camp
- `DELETE /api/camps/:id` - Delete camp

### Users
- `POST /api/auth/register` - Register new user
- `POST /api/auth/login` - User login
- `GET /api/auth/me` - Get current user
- `PUT /api/users/:id` - Update user
- `DELETE /api/users/:id` - Delete user

### Reviews
- `GET /api/reviews` - Get all reviews
- `GET /api/reviews/:id` - Get review by ID
- `POST /api/reviews` - Create new review
- `PUT /api/reviews/:id` - Update review
- `DELETE /api/reviews/:id` - Delete review

## Security Features

- JWT-based authentication
- Password hashing
- Input validation
- CORS protection
- Rate limiting
- Role-based access control

## Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/AmazingFeature`)
3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

## License

This project is licensed under the ISC License.

## Contact

[Your Name] - [Your Email]

Project Link: [https://github.com/yourusername/camp-explorer-platform](https://github.com/yourusername/camp-explorer-platform) 